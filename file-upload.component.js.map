{"version":3,"file":"file-upload.component.js","sourceRoot":"","sources":["../src/file-upload.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit, Input, Output, EventEmitter, OnChanges, SimpleChanges, Inject } from '@angular/core';\r\n\r\n\r\nexport class FileUploadComponent implements OnInit, OnChanges {\r\n\r\n   multiple: boolean;\r\n   formatsAllowed = \".jpg,.png,.pdf,.docx,.txt,.gif,.jpeg\";\r\n   uploadAPI: string;\r\n   maxSize: number = 20;\r\n   ApiResponse = new EventEmitter();\r\n   resetUpload: boolean;\r\n   theme: string;\r\n   hideProgressBar: boolean;\r\n  \r\n  idDate: number = +(new Date());\r\n  id: number = parseInt(((this.idDate/10000).toString()).split('.')[1]) + (Math.floor(Math.random() * 20) * 10000);\r\n  reg: RegExp = /(?:\\.([^.]+))?$/;\r\n  selectedFiles: Array<any> = [];\r\n  notAllowedList: Array<Object> = [];\r\n  Caption: Array<string> = [];\r\n  singleFile = true;\r\n  progressBarShow = false;\r\n  uploadBtn = false;\r\n  uploadMsg = false;\r\n  afterUpload = false;\r\n  uploadClick = true;\r\n  uploadMsgText: string;\r\n  uploadMsgClass: string;\r\n  percentComplete: number;\r\n\r\n\r\n  constructor() { \r\n  //console.log(this.id);\r\n  //console.log(this.idDate);\r\n  //console.log(Math.random());\r\n  }\r\n\r\n  ngOnChanges(rst: SimpleChanges) {\r\n    if(rst['resetUpload']){\r\n      if (rst['resetUpload'].currentValue === true) {\r\n        this.selectedFiles = [];\r\n        this.Caption = [];\r\n        this.notAllowedList = [];\r\n        this.uploadMsg = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.resetUpload = false;\r\n  }\r\n\r\n  onChange(event :any) {\r\n    //console.log(this.maxSize + this.formatsAllowed + this.multiple);\r\n    this.notAllowedList = [];\r\n    //console.log(\"onchange hit\");\r\n    if (this.afterUpload || !this.multiple) {\r\n      this.selectedFiles = [];\r\n      this.Caption = [];\r\n      this.afterUpload = false;\r\n    }\r\n    //FORMATS ALLOWED LIST\r\n    //console.log(\"FORMATS ALLOWED LIST= \"+this.formatsAllowed);\r\n    //NO OF FORMATS ALLOWED\r\n    let formatsCount: any;\r\n    formatsCount = this.formatsAllowed.match(new RegExp(\"\\\\.\", \"g\"));\r\n    formatsCount = formatsCount.length;\r\n    //console.log(\"NO OF FORMATS ALLOWED= \"+formatsCount);\r\n    //console.log(\"-------------------------------\");\r\n\r\n    //ITERATE SELECTED FILES\r\n    let file = event.target.files || event.srcElement.files;\r\n    let currentFileExt: any;\r\n    let ext: any;\r\n    let frmtAllowed: boolean;\r\n    for (let i = 0; i < file.length; i++) {\r\n      //CHECK FORMAT\r\n      //CURRENT FILE EXTENSION\r\n      currentFileExt = this.reg.exec(file[i].name);\r\n      currentFileExt = currentFileExt[1];\r\n      //console.log(file[i].name);\r\n      frmtAllowed = false;\r\n      //FORMAT ALLOWED LIST ITERATE\r\n      for (let j = formatsCount; j > 0; j--) {\r\n        ext = this.formatsAllowed.split(\".\")[j];\r\n        //console.log(\"FORMAT LIST (\"+j+\")= \"+ext.split(\",\")[0]);\r\n        if (j == formatsCount) {\r\n          ext = this.formatsAllowed.split(\".\")[j] + \",\";\r\n        }//check format\r\n        if (currentFileExt.toLowerCase() == ext.split(\",\")[0]) {\r\n          frmtAllowed = true;\r\n        }\r\n      }\r\n\r\n      if (frmtAllowed) {\r\n        //console.log(\"FORMAT ALLOWED\");\r\n        //CHECK SIZE\r\n        if (file[i].size > (this.maxSize * 1024000)) {\r\n          //console.log(\"SIZE NOT ALLOWED (\"+file[i].size+\")\");\r\n          this.notAllowedList\r\n            .push({\r\n              \"fileName\": file[i].name,\r\n              \"fileSize\": this.convertSize(file[i].size),\r\n              \"errorMsg\": \"Invalid size\"\r\n            });\r\n          continue;\r\n        } else {\r\n          //format allowed and size allowed then add file to selectedFile array \r\n          this.selectedFiles.push(file[i]);\r\n        }\r\n      }\r\n      else {\r\n        //console.log(\"FORMAT NOT ALLOWED\");\r\n        this.notAllowedList\r\n          .push({\r\n            \"fileName\": file[i].name,\r\n            \"fileSize\": this.convertSize(file[i].size),\r\n            \"errorMsg\": \"Invalid format\"\r\n          });\r\n        continue;\r\n      }\r\n    }\r\n\r\n    if (this.selectedFiles.length !== 0) {\r\n      this.uploadBtn = true;\r\n      if (this.theme == 'attachPin')\r\n        this.uploadFiles();\r\n    } else {\r\n      this.uploadBtn = false;\r\n    }\r\n    this.uploadMsg = false;\r\n    this.uploadClick = true;\r\n    this.percentComplete = 0;\r\n    event.target.value = null;\r\n\r\n\r\n\r\n  }\r\n\r\n  uploadFiles() {\r\n    //console.log(this.selectedFiles);\r\n\r\n    let i : any;\r\n    this.progressBarShow = true;\r\n    this.uploadClick = false;\r\n    this.notAllowedList = [];\r\n    let isError = false;\r\n\r\n    let xhr = new XMLHttpRequest();\r\n    let formData = new FormData();\r\n\r\n    for (i = 0; i < this.selectedFiles.length; i++) {\r\n      if (this.Caption[i] == undefined)\r\n        this.Caption[i] = \"file\";\r\n      //Add DATA TO BE SENT  \r\n      formData.append(this.Caption[i], this.selectedFiles[i]/*, this.selectedFiles[i].name*/);\r\n      //console.log(this.selectedFiles[i]+\"{\"+this.Caption[i]+\" (Caption)}\");\r\n    }\r\n\r\n    if (i > 1) {\r\n      this.singleFile = false;\r\n    }\r\n    else {\r\n      this.singleFile = true;\r\n    }\r\n\r\n    xhr.onreadystatechange = (evnt) => {\r\n      //console.log(\"onready\");\r\n      if (xhr.readyState === 4) {\r\n        if (xhr.status === 200) {\r\n          //this.ApiResponse.emit(JSON.parse(xhr.response));\r\n          this.ApiResponse.emit(xhr.response);\r\n          //console.log( \" (From SERVER)\");\r\n          //console.log(evnt);\r\n        } else {\r\n          //console.log(\"ERRRRRRor\");\r\n          //console.log(xhr.statusText + \" (From SERVER)\");\r\n          isError = true;\r\n          this.progressBarShow = false;\r\n          this.uploadBtn = false;\r\n          this.uploadMsg = true;\r\n          this.afterUpload = true;\r\n          this.uploadMsgText = \"Upload Failed !\";\r\n          this.uploadMsgClass = \"text-danger lead\";\r\n          //console.log(this.uploadMsgText);\r\n          //console.log(evnt);\r\n        }\r\n      }\r\n    };\r\n\r\n    xhr.upload.onprogress = (evnt) => {\r\n      if (evnt.lengthComputable) {\r\n        this.percentComplete = Math.round((evnt.loaded / evnt.total) * 100);\r\n      }\r\n      //console.log(\"Progress...\"/*+this.percentComplete+\" %\"*/);\r\n    };\r\n\r\n    xhr.onload = (evnt) => {\r\n      //console.log(\"onload\");\r\n      //console.log(evnt);\r\n      this.progressBarShow = false;\r\n      this.uploadBtn = false;\r\n      this.uploadMsg = true;\r\n      this.afterUpload = true;\r\n      if (!isError) {\r\n        this.uploadMsgText = \"Successfully Uploaded !\";\r\n        this.uploadMsgClass = \"text-success lead\";\r\n        //console.log(this.uploadMsgText + \" \" + this.selectedFiles.length + \" file\");\r\n      }\r\n    };\r\n\r\n    xhr.onerror = (evnt) => {\r\n      //console.log(\"onerror\");\r\n      //console.log(evnt);\r\n    };\r\n    let token = sessionStorage.getItem('token');\r\n    xhr.open(\"POST\",this.uploadAPI, true);\r\n    //xhr.setRequestHeader(\"Content-Type\", \"text/plain;charset=UTF-8\");\r\n    //xhr.setRequestHeader('Authorization', `Bearer ${token}`);\r\n    xhr.send(formData);\r\n  }\r\n\r\n  removeFile(i : any, sf_na :any) {\r\n    //console.log(\"remove file clicked \" + i)\r\n    if (sf_na == \"sf\") {\r\n      this.selectedFiles.splice(i, 1);\r\n      this.Caption.splice(i, 1);\r\n    } else {\r\n      this.notAllowedList.splice(i, 1);\r\n    }\r\n\r\n    if (this.selectedFiles.length == 0) {\r\n      this.uploadBtn = false;\r\n    }\r\n  }\r\n\r\n  convertSize(fileSize :number) {\r\n    //console.log(fileSize + \" - \"+ str);\r\n    return fileSize < 1024000 ? (fileSize / 1024).toFixed(2) + \"KB\" : (fileSize / 1024000).toFixed(2) + \"MB\";\r\n  }\r\n  attachpinOnclick() {\r\n    //console.log(\"ID: \", this.id);\r\n    //document.getElementById(\"sel\" + this.id).click();\r\n  //  $(\"#\"+\"sel\"+this.id).click();\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  selector: 'angular-file-uploader',\r\n  template: `<div class=\"container\" *ngIf=\"!theme\" id=\"default\">\r\n    <label for=\"sel{{id}}\" class=\"btn btn-primary btn-sm\">Select File</label>\r\n    <input type=\"file\" id=\"sel{{id}}\" style=\"display: none\" (change)=\"onChange($event)\" title=\"Select file\" name=\"files[]\" [accept]=formatsAllowed\r\n        [attr.multiple]=\"multiple ? '' : null\" />\r\n    <br>\r\n    <p class=\"constraints-info\">({{formatsAllowed}}) Size limit- {{(convertSize(maxSize *1024000))}}</p>\r\n    <!--Selected file list-->\r\n    <div class=\"row\" *ngFor=\"let sf of selectedFiles;let i=index\">\r\n        <p class=\"col-xs-3 textOverflow\">\r\n            <span class=\"text-primary\">{{sf.name}}</span>\r\n        </p>\r\n        <p class=\"col-xs-3 padMarg sizeC\">\r\n            <strong>({{convertSize(sf.size)}})</strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n        <!--  <input class=\"col-xs-3 progress caption\"  type=\"text\"  placeholder=\"Caption..\"  [(ngModel)]=\"Caption[i]\"  *ngIf=\"uploadClick\"/> -->\r\n        <div class=\"progress col-xs-3 padMarg\" *ngIf=\"singleFile && progressBarShow && !hideProgressBar\">\r\n            <span class=\"progress-bar progress-bar-success\" role=\"progressbar\" [ngStyle]=\"{'width':percentComplete+'%'}\">{{percentComplete}}%</span>\r\n        </div>\r\n        <a class=\"col-xs-1\" role=\"button\" (click)=\"removeFile(i,'sf')\" *ngIf=\"uploadClick\">x</a>\r\n    </div>\r\n    <!--Invalid file list-->\r\n    <div class=\"row text-danger\" *ngFor=\"let na of notAllowedList;let j=index\">\r\n        <p class=\"col-xs-3 textOverflow\">\r\n            <span>{{na.fileName}}</span>\r\n        </p>\r\n        <p class=\"col-xs-3 padMarg sizeC\">\r\n            <strong>({{na.fileSize}})</strong>\r\n        </p>\r\n        <p class=\"col-xs-3 \">{{na.errorMsg}}</p>\r\n        <a class=\"col-xs-1\" role=\"button\" (click)=\"removeFile(j,'na')\" *ngIf=\"uploadClick\">&nbsp;x</a>\r\n    </div>\r\n\r\n    <p *ngIf=\"uploadMsg\" class=\"{{uploadMsgClass}}\">{{uploadMsgText}}\r\n        <p>\r\n\r\n            <div *ngIf=\"!singleFile && progressBarShow && !hideProgressBar\">\r\n                <div class=\"progress col-xs-4 padMarg\">\r\n                    <span class=\"progress-bar progress-bar-success\" role=\"progressbar\" [ngStyle]=\"{'width':percentComplete+'%'}\">{{percentComplete}}%</span>\r\n                </div>\r\n                <br>\r\n                <br>\r\n            </div>\r\n            <button class=\"btn btn-success\" type=\"button\" (click)=\"uploadFiles()\" [disabled]=!uploadBtn>Upload</button>\r\n            <br>\r\n</div>\r\n\r\n<!--/////////////////////////// ATTACH PIN THEME  //////////////////////////////////////////////////////////-->\r\n<div *ngIf=\"theme == 'attachPin'\" id=\"attachPin\">\r\n    <div style=\"position:relative;padding-left:6px\">\r\n        <a class='btn btn-primary up_btn'>\r\n            Attach supporting documents..\r\n            <i class=\"fa fa-paperclip\" aria-hidden=\"true\" (click)=\"attachpinOnclick()\"></i>\r\n            <!-- <p style=\"margin-top:10px\">({{formatsAllowed}}) Size limit- {{(convertSize(maxSize * 1024000))}}</p> -->\r\n            <input type=\"file\" id=\"sel{{id}}\" (change)=\"onChange($event)\" style=\"display: none\" title=\"Select file\" name=\"files[]\" [accept]=formatsAllowed\r\n                [attr.multiple]=\"multiple ? '' : null\" />\r\n            <br>\r\n        </a>\r\n        &nbsp;\r\n        <span class='label label-info' id=\"upload-file-info{{id}}\">{{selectedFiles[0]?.name}}</span>\r\n    </div>\r\n</div>`,\r\n  styles: [`.constraints-info{\r\n    margin-top:10px;\r\n    font-style: italic;\r\n}\r\n.padMarg{\r\n    padding: 0px;\r\n    margin-bottom:0px;\r\n}\r\n.caption{\r\n    margin-right:5px;\r\n}\r\n.textOverflow{\r\n    white-space: nowrap; \r\n    padding-right: 0;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis; \r\n}\r\n@media screen and (max-width: 620px){\r\n    .caption{\r\n        padding: 0;\r\n    }\r\n}\r\n@media screen and (max-width: 510px){\r\n    .sizeC{\r\n        width:25%;\r\n    }\r\n}\r\n@media screen and (max-width: 260px){\r\n    .sizeC{\r\n        font-size:10px; \r\n    }\r\n    .caption{\r\n        font-size:10px; \r\n    }\r\n}`],\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'multiple': [{ type: Input },],\n'formatsAllowed': [{ type: Input },],\n'uploadAPI': [{ type: Input },],\n'maxSize': [{ type: Input },],\n'ApiResponse': [{ type: Output },],\n'resetUpload': [{ type: Input },],\n'theme': [{ type: Input },],\n'hideProgressBar': [{ type: Input },],\n};\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}